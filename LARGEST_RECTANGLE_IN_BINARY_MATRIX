class Solution {
public: 
    int max_histo(vector<int> heights)                                                // HISTOGRAM CODE
    {
        int leftmin[heights.size()];   //leftwall
        int rightmin[heights.size()]; // rightwall
        stack<int> st;
        for(int i=0; i<heights.size(); i++)                        
        {
            while(st.empty()==false && heights[st.top()]>=heights[i])
            {
                st.pop();
            }
            if(st.empty()==true)
            {
                leftmin[i]=0;
            }
            else{
                leftmin[i]=st.top()+1;
            }
            st.push(i);
        }
        while(st.empty()==false)
        {
            st.pop();
        }
        for(int i=heights.size()-1; i>=0;i--)
        {
            while(st.empty()==false && heights[st.top()]>=heights[i])
            {
                st.pop();
            }
            if(st.empty()==true)
            {
                rightmin[i]=heights.size()-1;
            }
            else{
                rightmin[i]=st.top()-1;
            }
            st.push(i);
        }
        int ans=INT_MIN;
        for(int i=0; i<heights.size(); i++)
        {
            ans = max(ans,(rightmin[i]-leftmin[i]+1)*heights[i]);
        }
        return ans;
        
    }
    int maximalRectangle(vector<vector<char>>& matrix) {
       
        if(matrix.empty())
            return 0;
        
        int m = matrix.size();
        int n = matrix[0].size();
        int res = 0;
        
        vector<int> height(n, 0);
        
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(matrix[i][j] == '1')
                    height[j]++;
                else
                    height[j] = 0;        // when zero occur make the height zero
            }
            
            res = max(res, max_histo(height));
        }
        
        return res;    
        
    }
};
// TC (C*R) SC O(4N)
