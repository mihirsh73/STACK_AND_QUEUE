class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        /*vector<int> res;
        int ans;
        for(int i=0; i<=nums.size()-k; i++)
        {
            ans=INT_MIN;
            for(int j=i; j<i+k; j++)
            {                                       // O(N^2) 
                ans = max(ans,nums[j]);
            }
            res.push_back(ans);
        }
        return res;*/
       deque<int> dq;
        vector<int> res;
        for(int i=0; i<nums.size(); i++)
        {
            if(dq.empty()==false && dq.front()==i-k) dq.pop_front(); // if index is out of window                     // TC O(N) SC O(N)
            while(dq.empty()==false && nums[i]>nums[dq.back()])  // if decreasing not maintained pop from the back
            {
                dq.pop_back();
            }
            dq.push_back(i);
            if(i>=k-1)
            {
                res.push_back(nums[dq.front()]);
            }
        }
        return res;
        
    }
};
